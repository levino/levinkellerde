---
import Layout from "@levino/shipyard-base/layouts/Page.astro"
import type { GetStaticPaths } from "astro"
import { prop, groupBy, indexBy, mapObjIndexed } from "ramda"
import { pipe } from "fp-ts/lib/function"
import { getCollection } from "astro:content"
import { getEntry } from "astro:content"
export const getStaticPaths = (() => {
  return [
    {
      params: {
        locale: "de",
      },
    },
  ]
}) satisfies GetStaticPaths

const outOfStock = ({ data: { inStock } }: { data: { inStock: boolean } }) =>
  !inStock

const plants = await getCollection("plantStock", outOfStock)
  .then((plants) =>
    plants.map(({ data: { plant } }) =>
      getEntry(plant).then(
        ({
          id,
          data: {
            supplier: { id: supplierId },
            name: { german: name },
          },
        }) => ({ supplierId, name, link: `./plants/${id}` }),
      ),
    ),
  )
  .then((promises) => Promise.all(promises))

const vegetables = await getCollection("vegetableStock", outOfStock)
  .then((plants) =>
    plants.map(({ data: { vegetable } }) =>
      getEntry(vegetable).then(
        ({
          id,
          data: {
            supplier: { id: supplierId },
            name: { de: name },
          },
        }) => ({ supplierId, name, link: `./plants/${id}` }),
      ),
    ),
  )
  .then((promises) => Promise.all(promises))

const suppliers = await getCollection("suppliers").then(indexBy(prop("id")))
const vegBySupplier = pipe(
  vegetables.concat(plants),
  groupBy(prop("supplierId")),
  mapObjIndexed((vegetables, supplierId) => ({
    supplierName: suppliers[supplierId].data.name,
    vegetables,
  })),
)
---

<Layout title="Einkaufsliste">
  <div class="container mx-auto">
    <h1 class="m-4 text-center text-xl">Einkaufsliste</h1>
    <table class="table">
      <thead>
        <tr>
          {
            Object.values(vegBySupplier).map(({ supplierName }) => (
              <th>{supplierName}</th>
            ))
          }
        </tr>
      </thead>
      <tbody>
        {
          Object.values(vegBySupplier).map(({ vegetables }) => (
            <td class="align-top">
              <ul class="list-inside list-disc">
                {vegetables!.map(({ name, link }) => (
                  <li>
                    <a href={link}>{name}</a>
                  </li>
                ))}
              </ul>
            </td>
          ))
        }
      </tbody>
    </table>
  </div>
</Layout>
